import java.util.LinkedList;


public class EulerGraph {
	private int V;
	private LinkedList<EulerEdge>[] adj; 
	
	public EulerGraph(EdgeWeightedGraph G){
		this.V = G.V();
		adj = (LinkedList<EulerEdge>[]) new LinkedList[G.V()];
		for (int i = 0; i < V; i++) {
			adj[i] = new LinkedList<EulerEdge>();
		}
		
		for (int i = 0; i < V; i++) {
			for (Edge e : G.adj(i)) {
				int u = e.either();
				int v = e.other(u);
				double weight = e.weight();
				adj[i].add(new EulerEdge(u, v, weight));
			}
		}
		
	}
	
	public boolean hasCycle() {
		
	}
	
	public Iterable<Integer> cycle() {
		if (!hasCycle()) 
			throw new UnsupportedOperationException("Do not have any euler cycle");
		
	}
	
	
	
	private class EulerEdge {
		private int u, v;
		private boolean deleted;
		private double weight;
		
		public EulerEdge(int u, int v, double weight) {
			this.u = u;
			this.v = v;
			this.weight = weight;
			deleted = false;
		}
		
		public int either() {
			return u;
		}
		
		public int other(int w) {
			if (w == u)
				return v;
			else 
				return u;
		}
		
		public double weight() {
			return weight;
		}
		
		public void delete() {
			deleted = true;
		}
	}
}
