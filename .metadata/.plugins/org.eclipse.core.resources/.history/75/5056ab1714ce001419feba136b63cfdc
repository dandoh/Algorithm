
public class EulerTour {
	private Graph G;
	private int[] deg;
	private boolean hasTour = true;
	private boolean[] marked;
	
	
	public EulerTour(Graph G) {
		this.G = G;
		deg = new int[G.V()];
		marked = new boolean[G.V()];
		for (int i = 0; i < G.V(); i++) {
			deg[i] = G.degree(i);
		}
		for (int i = 0; i < G.V(); i++) {
			if (deg[i] % 2 != 0) {
				hasTour = false;
				break;
			}
		}
		
		if (hasTour) {
			dfs(G, 0, 0);
		}
	}
	
	public boolean hasTour() {
		return hasTour;
	}
	
	private void dfs(Graph G, int v, int start) {
		marked[v] = true;
		deg[v] -= 2;
		for (int u : G.adj(v)) {
			if (!marked[u]) {
				dfs(G, u, start);
			} else if (u == start) {
				break;
			}
		}
		if (deg[v] > 0) {
			dfs(G, v, v);
		}
	}
	
	public static void main(String[] args) {
		Graph G = new Graph(new In(args[0]));
		EulerTour et = new EulerTour(G);
		
		if (et.hasTour()) {
			StdOut.println("Has a tour");
		}
	}
}
