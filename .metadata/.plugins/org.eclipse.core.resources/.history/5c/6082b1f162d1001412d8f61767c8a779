public class WordNet {
	
	
	private final Digraph G;
	private final ST<String, Bag<Integer>> st;
	
	// constructor takes the name of the two input files
	public WordNet(String synsets, String hypernyms) {
		st = new ST<String, Bag<Integer>>();
		In in = new In(synsets);
		
		while (in.hasNextLine()) {
			String[] a = in.readLine().split(",");
			int index = Integer.parseInt(a[0]);
			
			String[] b = a[1].split(" ");
			for (int i = 0; i < b.length; i++) {
				
			}
		}
	}

	// returns all WordNet nouns
	public Iterable<String> nouns() {
	}

	// is the word a WordNet noun?
	public boolean isNoun(String word) {
	}

	// distance between nounA and nounB (defined below)
	public int distance(String nounA, String nounB) {
	}

	// a synset (second field of synsets.txt) that is the common ancestor of
	// nounA and nounB
	// in a shortest ancestral path (defined below)
	public String sap(String nounA, String nounB) {
	}

	// do unit testing of this class
	public static void main(String[] args) {
	}
}