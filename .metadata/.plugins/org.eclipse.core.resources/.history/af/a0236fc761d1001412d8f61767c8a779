import java.util.ArrayList;



public class WordNet {
	
	private final Digraph G;
	private final ST<String, Noun> st;
	private final ArrayList<String> synset;
	
	@SuppressWarnings("unused")
	public WordNet(String synsets, String hypernyms) {
		st = new ST<String, Noun>();
		synset = new ArrayList<String>();
		
		In in = new In(synsets);
		while (in.hasNextLine()) {
			String[] a = in.readLine().split(",");
			int id = Integer.parseInt(a[0]);
			
			synset.add(a[1]);
			String[] b = a[1].split(" ");
			for (int i = 0; i < b.length; i++) {
				if (!st.contains(b[i])) {
					st.put(b[i], new Noun(id));
				} else {
					st.get(b[i]).addId(id);
				}
			}
		}
		
		G = new Digraph(st.size());
		
		in = new In(hypernyms);
		while (in.hasNextLine()) {
			String[] a = in.readLine().split(",");
			int s = Integer.parseInt(a[0]);
			for (int i = 1; i < a.length; i++) {
				G.addEdge(s, Integer.parseInt(a[i]));
			}
		}
		
		DirectedCycle dc = new DirectedCycle(G);
		if (dc.hasCycle()) 
			throw new IllegalArgumentException();
		
		int count = 0; 
		for (int i = 0; i < G.V(); i++) {
			int sum = 0;
			for (int j : G.adj(i)) {
				sum++;
			}
			if (sum == 0) count++;
		}
		if (count > 1) 
			throw new IllegalArgumentException();
		
		
	}
	
	public Iterable<String> nouns() {
		Queue<String> queue = new Queue<String>();
		for (String s : st) {
			queue.enqueue(s);
		}
		
		return queue;
	}
	
	public boolean isNoun(String word) {
		if (word == null)
			throw new NullPointerException();
		
		return st.contains(word);
	}
	
	public int distance(String nounA, String nounB) {
		if (nounA == null || nounB == null)
			throw new NullPointerException();
		if (!isNoun(nounA) || !isNoun(nounB))
			throw new IllegalArgumentException();
		
		
		
		return 0;
	}
	
	public String sap(String nountA, String nounB) {
		return null;
	}
	
	public static void main(String[] args) {
		Queue<Integer> q = new Queue<Integer>();
		int i = 0;
		for (int j : q) i++;
		StdOut.print(i);
	}
	
	private class Noun {
		private Bag<Integer> id;
		
		public Noun(int index) {
			id = new Bag<Integer>();
			id.add(index);
		}
		
		public Iterable<Integer> getId() {
			return id;
		}
		
		public void addId(int i) {
			id.add(i);
		}
	}
}
